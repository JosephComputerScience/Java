/* The following Java implementation of a class Node is given:
private class Node<Comparable> {
 Node() {
 this(null, null);
 }
 Node(Comparable d) {
 this(d, null);
 }
 Node(Comparable d, Node n) {
 data = d;
 next = n;
 }
 Comparable data;
 Node next;
 }
Assume that a singly linked list is implemented with a header node, but no tail node, and
that it maintains only a reference to the header node.
Using the class Node described above, write a MySortedSingleList class in Java includes
methods to:
(a) boolean contains( Object x ) - test if a value x is contained in the linked list.
(b) boolean add( Object x ) - add a value x if it is not already contained in the linked list.
(c) boolean remove(Object x) - remove a value x if it is contained in the linked list.
maintaining the singly linked list in sorted order. */ 

public class MySortedSingleList {
	private class Node<Comparable> {
		Node() {
			this(null, null);
		}

		Node(Comparable d) {
			this(d, null);
		}

		Node(Comparable d, Node n) {
			data = d;
			next = n;
		}

		Comparable data;
		Node next;
	}

	Node head;
	int size;

	public boolean contains(Object value) 
	{
		Node temp = head;
		while (temp != null) {
			if (temp.data == value) {
				return true;
			}
			temp = temp.next;
		}
		return false;
	}
	
	public boolean add(Object value) 
	{
		if (isEmpty()) 
		{
			head = new Node(value);
			size++;
			return true;
		}
		if (contains(value)) 
		{
			return false;
		}
		Node curr = head;
		Node prev = head;
		while (curr != null) 
		{
			
			if (curr.next == null) 
			{
				//adds element at the end if needed
				if (compare((Comparable) value, (Comparable) curr.data) > 0) 
				{
					curr.next = new Node(value, curr.next);
					break;
				}
				//adds element at the beginning if needed
				else head = new Node(value, head); break;
			} 
			//adds the element in between if needed
			else if ((compare((Comparable) value, (Comparable) curr.data) > 0)
					&& (compare((Comparable) value, (Comparable) curr.next.data) < 0)) 
			{
				curr.next = new Node(value, curr.next);
				break;
			}
			prev = curr;
			curr = curr.next;

		}
		size++;
		return true;
	}
	public boolean remove(Object value)
	{
		Node temp = head;
		if(isEmpty())
		{
			return false;
		}
		if(contains(value))
		{
			if(head.data == value)
			{
				head = head.next;
				size--;
				return true;
			}
			while(temp.next != null)
			{
				if (temp.next.data == value)
				{
					temp.next = temp.next.next;
					size--;
					return true;
				}
				temp = temp.next;
			}
			
		}
		return false;
	}
	public boolean isEmpty() 
	{
		return size == 0;
	}
	public int compare(Comparable value, Comparable value2) 
	{
		if (value.compareTo(value2) == 0) {
			return 0;
		} else if (value.compareTo(value2) > 0) {
			return 1;
		} else
			return -1;
	}
	public int size() 
	{
		if (isEmpty()) {
			return 0;
		}
		return size;
	}
	public void print() 
	{
		Node temp = head;
		while (temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
	}
}
