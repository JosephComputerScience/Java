//Given a sorted array of integer, A, with possible duplicate elements.
//Implement an efficient function in Java to find in A, the numbers of occurrences of the
//input value k.
//For example, in an array A = {-1, 2, 3, 5, 6, 6, 6, 9, 10} and k = 6, your program should
//return 3. 

//Method to find the number of occurrences in a array
static int numOfOccu(int sortedArr[], int target) 
{

		if (binSearch(sortedArr, 0, sortedArr.length - 1, target)) {
			//This return subtracts the two returns to get the number of occurrences
			return lastOcc(sortedArr, target, 0, sortedArr.length - 1)
					- firstOcc(sortedArr, target, 0, sortedArr.length - 1);
		}
		return 0;
}

//This method will be used to see if the target integer exist in the array
static boolean binSearch(int arr[], int low, int high, int target) {

		if (low <= high) {
			int mid = (low + high) / 2;
			if (arr[mid] == target) {
				return true;
			}
			if (arr[mid] > target) {
				return binSearch(arr, low, mid - 1, target);
			} else
				return binSearch(arr, mid + 1, high, target);
		}
		return false;
}
//This method finds the first occurrences in the array for the target number and returns its index
static int firstOcc(int arr[], int target, int low, int high) 
{

		if (low <= high) {
			int mid = (low + high) / 2;
			if (mid == 0 || arr[mid] == target && arr[mid - 1] < target) {
				return mid;
			} else if (target > arr[mid]) {
				return firstOcc(arr, target, mid + 1, high);
			} else
				return firstOcc(arr, target, low, mid - 1);
		}
		return 0;
}
//This method finds the last occurrence of the target number and returns the index + 1
static int lastOcc(int arr[], int target, int low, int high) 
{
		if (low <= high) {
			int mid = (low + high) / 2;
			if (mid == arr.length - 1 || arr[mid] == target && arr[mid + 1] > target) {
				return mid + 1;
			} else if (target < arr[mid]) {
				return lastOcc(arr, target, low, mid - 1);
			} else
				return lastOcc(arr, target, mid + 1, high);
		}
		return 0;
}

