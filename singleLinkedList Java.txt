/*The following Java implementation of a class Node is given:
private class Node<Object> {
 Node() {
 this(null, null);
 }
 Node(Object d) {
 this(d, null);
 }
 Node(Object d, Node n) {
 data = d;
 next = n;
 }
 Object data;
 Node next;
 }
Assume that a singly linked list is implemented with a header node, but no tail node, and
that it maintains only a reference to the header node.
Using the class Node described above, write a MySingleLinkedList class in Java includes
methods to:
(a) int size() - return the size of the linked list.
(b) void print() - print the linked list.
(c) boolean contains(Object x) - test if a value x is contained in the linked list.
(d) boolean add(Object x) - add a value x if it is not already contained in the linked list.
(e) boolean remove(Object x) - remove a value x if it is contained in the linked list. 
*/


public class MySingleLinkedList {
	private class Node<Object> {
		Node() 
		{
			this(null, null);
		}

		Node(Object d) 
		{
			this(d, null);
		}

		Node(Object d, Node n) 
		{
			data = d;
			next = n;
		}

		Object data;
		Node next;
	}
	private Node head;
	private int size;
	public boolean isEmpty()
	{
		return head == null;
	}
	public int size()
	{
		if(isEmpty())
		{
			return 0;
		}
		return size;
	}
	public void print()
	{
		Node temp = head;
		while (temp != null)
		{
			System.out.println(temp.data);
			temp = temp.next;
		}
	}
	public boolean contain(Object value)
	{
		Node temp = head;
		while(temp != null)
		{
			if (temp.data == value)
			{
				return true;
			}
			temp = temp.next;
		}
		return false;
	}
	public boolean add(Object value)
	{
		if (size == 0)
		{
			head = new Node(value);
			size++;
			return true;
		}
		Node temp = head;
		while(temp != null)
		{
			if(temp.data == value)
			{
				return false;
			}
			temp = temp.next;
		}
		//Object buffer = head;
		//head.data = head;
		//head.next.data = buffer;
		head = new Node(value, head);
		size++;
		return true;
	}
	public boolean remove(Object value)
	{
		
		if(head.data == value)
		{
			head = head.next;
			return true;
		}
		Node temp = head;
		while(temp.next != null)
		{
			if(temp.next.data == value)
			{
				temp.next = temp.next.next;
				return true;
			}
			temp = temp.next;
		}
		return false;
	}
	
}
